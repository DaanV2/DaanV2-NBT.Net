<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DaanV2.NBT.Net</name>
    </assembly>
    <members>
        <member name="T:DaanV2.NBT.NBTTagValue`1">
            <summary>The base class that handles generic values of an <see cref="T:DaanV2.NBT.NBTTag"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.#ctor">
            <summary>Creates a new instance of <see cref="!:NBTTagValue"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.#ctor(System.String,`0)">
            <summary>Creates a new instance of <see cref="!:NBTTagValue"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.GetValue">
            <summary>Returns the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/> as an <see cref="T:System.Object"/></summary>
            <returns>Returns the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/> as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.GetValue``1">
            <summary>Returns the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/> as an <see cref="!:T"/>, returns null if castings values</summary>
            <typeparam name="T">The generic type to return</typeparam>
            <returns>Returns a <see cref="!:T"/> that represents the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/>, returns null if castings values</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.SetValue(System.Object)">
            <summary>Sets the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/></summary>
            <param name="O">The object to store inside</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.ConvertValue``1">
            <summary>Casts the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to the specifed type, routes through <see cref="T:DaanV2.NBT.NBTCasting"/></summary>
            <typeparam name="T">Add Type description</typeparam>
            <returns>Casts the value of this <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to the specifed type, routes through <see cref="T:DaanV2.NBT.NBTCasting"/></returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Equality(DaanV2.NBT.NBTTagValue{`0},DaanV2.NBT.NBTTagValue{`0})">
            <summary>Compare two <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to see if they are equal</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to see if they are equal</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Inequality(DaanV2.NBT.NBTTagValue{`0},DaanV2.NBT.NBTTagValue{`0})">
            <summary>Compare two <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to see if they are not equal</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two <see cref="T:DaanV2.NBT.NBTTagValue`1"/> to see if they are not equal</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Equality(DaanV2.NBT.NBTTagValue{`0},System.Object)">
            <summary>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> equals a given object</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> equals a given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Inequality(DaanV2.NBT.NBTTagValue{`0},System.Object)">
            <summary>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> not equals a given object</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> not equals a given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Equality(DaanV2.NBT.NBTTagValue{`0},`0)">
            <summary>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> equals a given object</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> equals a given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.op_Inequality(DaanV2.NBT.NBTTagValue{`0},`0)">
            <summary>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> not equals a given object</summary>
            <param name="A">The first object to compare to</param>
            <param name="B">The second object to compare</param>
            <returns>Compare one <see cref="T:DaanV2.NBT.NBTTagValue`1"/> not equals a given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.SetInformation(DaanV2.NBT.NBTTagInformation,System.Object)">
            <summary>Sets the specified information of the tag</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.GetInformation(DaanV2.NBT.NBTTagInformation)">
            <summary>Returns the specified information of this instance</summary>
            <param name="InfoType">The info type to retrieve from this instance</param>
            <returns>Returns the specified information of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.ToString">
            <summary>Returns a string representation of this tag</summary>
            <returns>Returns a string representation of this tag</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.Equals(System.Object)">
            <summary>Compare this instance with the given instance if they are the same</summary>
            <param name="obj">The object to compare to</param>
            <returns>Compare this instance with the given instance if they are the same</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.Equals(DaanV2.NBT.NBTTagValue{`0})">
            <summary>Compare this instance with the given instance if they are the same</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance with the given instance if they are the same</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagValue`1.GetHashCode">
            <summary>Returns the hashcode for this object</summary>
            <returns>Returns the hashcode for this object</returns>
        </member>
        <member name="P:DaanV2.NBT.NBTTagValue`1.Value">
            <summary>Gets or sets the value of this Tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagValue`1._Value">
            <summary>The field that stores the value</summary>
        </member>
        <member name="T:DaanV2.NBT.NBTTag">
            <summary>An abstract classes that forms the basis of any NBT Tag</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTag"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.#ctor(System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTag"/></summary>
            <param name="Capacity">The suspected amount of capacity to add</param>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Count">
            <summary>Gets the amount of sub tag this tag has</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Tags">
            <summary>Gets or sets the subtag of this tag</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Item(System.String)">
            <summary>Gets or sets the subtag with the given name</summary>
            <param name="Name">The name of the tag</param>
            <returns>Gets or sets the subtag with the given name</returns>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Item(System.Int32)">
            <summary>Gets or sets the subtag with the given index</summary>
            <param name="Index">The index of </param>
            <returns>Gets or sets the subtag with the given index</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Add(DaanV2.NBT.ITag)">
            <summary>Adds the specified tag to this instance</summary>
            <param name="tag">The tag to add</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Add(DaanV2.NBT.ITag[])">
            <summary>Adds the given tags to the internal list</summary>
            <param name="tags">The tags to add</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Clear">
            <summary>clears the internal list</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Remove(System.Int32)">
            <summary>Removes the tag at the specified index</summary>
            <param name="Index">The index of the element</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Remove(System.String)">
            <summary>Removes the tag with the specified name</summary>
            <param name="Name">The name of the tag</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetSubTag(System.String)">
            <summary>Retrieves the tag with the given name</summary>
            <param name="Name">The name to find</param>
            <returns>Retrieves the tag with the given name</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetSubTag(System.Int32)">
            <summary>Retrieves the tag with the given index</summary>
            <param name="Index"></param>
            <returns>Retrieves the tag with the given index</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetSubValue``1(System.String)">
            <summary>Retrieves the tag's value with the given name</summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="Name">The name to find</param>
            <returns>Retrieves the tag's value with the given name</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetSubValue``1(System.Int32)">
            <summary>Retrieves the tag's value with the given index</summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="Index">The index to look at</param>
            <returns>Retrieves the tag's value with the given index</returns>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Name">
            <summary>Gets or sets the name of this tag</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTag.Type">
            <summary>Gets the type of this tag</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetValue">
            <summary>Gets the value of this tag</summary>
            <returns>Gets the value of this tag</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.SetValue(System.Object)">
            <summary>Sets the value of this tag with the given value</summary>
            <param name="O">The value to set</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.SetInformation(DaanV2.NBT.NBTTagInformation,System.Object)">
            <summary>Sets the specified information of this tag with the given value</summary>
            <param name="InfoType">The into type to store the information in</param>
            <param name="Info">The information to store</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetInformation(DaanV2.NBT.NBTTagInformation)">
            <summary>Retrieves the specified information</summary>
            <param name="InfoType">The info type to retrieve from this <see cref="T:DaanV2.NBT.ITag"/></param>
            <returns>Retrieves the specified information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.ConvertValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Clone">
            <summary>Creates a copy of this instance</summary>
            <returns>Creates a copy of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.op_Equality(DaanV2.NBT.NBTTag,DaanV2.NBT.NBTTag)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.op_Inequality(DaanV2.NBT.NBTTag,DaanV2.NBT.NBTTag)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.op_Equality(DaanV2.NBT.NBTTag,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.op_Inequality(DaanV2.NBT.NBTTag,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.ToString">
            <summary>Returns a string representation of this instance</summary>
            <returns>Returns a string representation of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="obj">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Equals(DaanV2.NBT.NBTTag)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.Equals(DaanV2.NBT.ITag)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTag.GetHashCode">
            <summary>Returns this instance hashcode</summary>
            <returns>Returns this instance hashcode</returns>
        </member>
        <member name="F:DaanV2.NBT.NBTTag._Tags">
            <summary>Any possible sub <see cref="T:DaanV2.NBT.ITag"/> this <see cref="T:DaanV2.NBT.NBTTag"/> can have</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTag._Name">
            <summary>The name of this tag</summary>
        </member>
        <member name="T:DaanV2.NBT.Builders.CompoundBuilder">
            <summary>The class that helps with building a nbt tag compound</summary>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Builders.CompoundBuilder"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Capacity">The amount of suspected sub tags</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.#ctor(DaanV2.NBT.NBTTagCompound)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Builders.CompoundBuilder"/></summary>
            <param name="Base">The base to use</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(DaanV2.NBT.ITag)">
            <summary>Adds the given tag to the internal list</summary>
            <param name="tag">The tag to add</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.Collections.Generic.IEnumerable{DaanV2.NBT.ITag})">
            <summary>Adds the given tags to the internal list</summary>
            <param name="values">The tags to add</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Byte)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Boolean)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Byte[])">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Double)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Single)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Int32)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Int32[])">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Int64)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Int64[])">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Int16)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.String)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Byte})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Boolean})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Double})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Single})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.Int16})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.Add(System.String,System.Collections.Generic.List{System.String})">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTag"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.AddSubCompound(System.String,System.Int32)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTagCompound"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <returns>Adds a new sub <see cref="T:DaanV2.NBT.NBTTagCompound"/> to the collection</returns>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.AddSubList(System.String,DaanV2.NBT.NBTTagType,System.Int32)">
            <summary>Adds a new sub <see cref="T:DaanV2.NBT.NBTTagList"/> to the collection</summary>
            <param name="Name">The name of the tag to add to the collection</param>
            <param name="SubType">The subtype of the tags inside the list</param>
            <param name="Capacity">The capacity to start the list with</param>
            <returns>Adds a new sub <see cref="T:DaanV2.NBT.NBTTagList"/> to the collection</returns>
        </member>
        <member name="M:DaanV2.NBT.Builders.CompoundBuilder.GetResult">
            <summary>Returns the final product of this builder</summary>
            <returns>Returns the final product of this builder</returns>
        </member>
        <member name="F:DaanV2.NBT.Builders.CompoundBuilder._Tag">
            <summary>The field that stores the base tag</summary>
        </member>
        <member name="T:DaanV2.NBT.Builders.ListBuilder">
            <summary> add description for class: ListBuilder</summary>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.#ctor(System.String,DaanV2.NBT.NBTTagType,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Builders.ListBuilder"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="SubType"></param>
            <param name="Capacity"></param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.#ctor(DaanV2.NBT.NBTTagList)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Builders.ListBuilder"/></summary>
            <param name="Base"></param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Byte)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Boolean)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Byte[])">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Double)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Single)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Int32)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Int32[])">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Int64)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Int64[])">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.Int16)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(System.String)">
            <summary>Add a item to the list</summary>
            <param name="Value">The value of the tag to add to the collection</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.Add(DaanV2.NBT.ITag)">
            <summary>Add a tag to the list</summary>
            <param name="Tag">The tag to add</param>
        </member>
        <member name="M:DaanV2.NBT.Builders.ListBuilder.GetResult">
            <summary>Returns the final product of this builder</summary>
            <returns>Returns the final product of this builder</returns>
        </member>
        <member name="F:DaanV2.NBT.Builders.ListBuilder._Tag">
            <summary>The field that stores the sub tag</summary>
        </member>
        <member name="T:DaanV2.NBT.NBTTagByteArray">
            <summary>The class that stores the information for: ByteArray</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagByteArray"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.#ctor(System.String,System.Byte[])">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagByteArray"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagByteArray._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagByteArray.Type">
            <summary>Returns the tag's type</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="obj">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.Equals(DaanV2.NBT.NBTTagByteArray)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.op_Equality(DaanV2.NBT.NBTTagByteArray,DaanV2.NBT.NBTTagByteArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.op_Inequality(DaanV2.NBT.NBTTagByteArray,DaanV2.NBT.NBTTagByteArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.op_Equality(DaanV2.NBT.NBTTagByteArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByteArray.op_Inequality(DaanV2.NBT.NBTTagByteArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagByte">
            <summary> add description for class: NBTTagByte</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagByte"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.#ctor(System.String,System.Byte)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagByte"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.#ctor(System.String,System.Boolean)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagByte"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagByte._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagByte.Type">
            <summary>Returns the tag's type</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.Equals(System.Object)">
            <summary>Compares this instance to the given object</summary>
            <param name="Obj">The object to compare to</param>
            <returns>Compares this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.Equals(DaanV2.NBT.NBTTagByte)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.op_Equality(DaanV2.NBT.NBTTagByte,DaanV2.NBT.NBTTagByte)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.op_Inequality(DaanV2.NBT.NBTTagByte,DaanV2.NBT.NBTTagByte)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.op_Equality(DaanV2.NBT.NBTTagByte,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagByte.op_Inequality(DaanV2.NBT.NBTTagByte,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagCompound">
            <summary>The class that stores the information for: Compound</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagCompound"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.#ctor(System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagCompound"/></summary>
            <param name="Capacity">The capacity to set the collection to</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagCompound"/></summary>
            <param name="Capacity">The capacity to set the collection to</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.GetEnumerator">
            <summary>Returns an enumerator that iterates through <see cref="T:DaanV2.NBT.NBTTagCompound"/></summary>
            <returns>Returns an enumerator that iterates through <see cref="T:DaanV2.NBT.NBTTagCompound"/></returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through <see cref="T:DaanV2.NBT.NBTTagCompound"/></summary>
            <returns>Returns an enumerator that iterates through <see cref="T:DaanV2.NBT.NBTTagCompound"/></returns>
        </member>
        <member name="F:DaanV2.NBT.NBTTagCompound._Type">
            <summary>The constant type used for this tag</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagCompound.Type">
            <summary>Returns the tag's type</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.GetValue">
            <summary>Returns the value of this Nbttag</summary>
            <returns>Returns the value of this Nbttag</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.GetValue``1">
            <summary>Safetly returns the value of this object, if object is not suspected type then the default value for that type is returned</summary>
            <typeparam name="T">The type to return</typeparam>
            <returns>Safetly returns the value of this object, if object is not suspected type then the default value for that type is returned</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.SetValue(System.Object)">
            <summary>Sets the value of this <see cref="T:DaanV2.NBT.NBTTag" /></summary>
            <param name="O">The object to store</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.ConvertValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.op_Equality(DaanV2.NBT.NBTTagCompound,DaanV2.NBT.NBTTagCompound)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.op_Inequality(DaanV2.NBT.NBTTagCompound,DaanV2.NBT.NBTTagCompound)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.op_Equality(DaanV2.NBT.NBTTagCompound,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.op_Inequality(DaanV2.NBT.NBTTagCompound,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.Equals(System.Object)">
            <summary>Compares this instance to the given object</summary>
            <param name="obj">The object to compare to</param>
            <returns>Compares this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.Equals(DaanV2.NBT.NBTTagCompound)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagCompound.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagDouble">
            <summary>The class that stores the information for: Double</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.#ctor">
            <summary>Creates a new instance of <see cref="!:NBTTagValue"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.#ctor(System.String,System.Double)">
            <summary>Creates a new instance of <see cref="!:NBTTagValue"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagDouble._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagDouble.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.Equals(DaanV2.NBT.NBTTagDouble)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.op_Equality(DaanV2.NBT.NBTTagDouble,DaanV2.NBT.NBTTagDouble)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.op_Inequality(DaanV2.NBT.NBTTagDouble,DaanV2.NBT.NBTTagDouble)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.op_Equality(DaanV2.NBT.NBTTagDouble,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagDouble.op_Inequality(DaanV2.NBT.NBTTagDouble,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagFloat">
            <summary>The class that stores the information for: Float</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagFloat"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.#ctor(System.String,System.Single)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagFloat"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagFloat._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagFloat.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.Equals(DaanV2.NBT.NBTTagFloat)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.op_Equality(DaanV2.NBT.NBTTagFloat,DaanV2.NBT.NBTTagFloat)">
            <summary>Compare two objects to one another to see if they are equal</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two objects to one another to see if they are equal</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.op_Inequality(DaanV2.NBT.NBTTagFloat,DaanV2.NBT.NBTTagFloat)">
            <summary>Compare two objects to one another to see if they are not equal</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two objects to one another to see if they are not equal</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.op_Equality(DaanV2.NBT.NBTTagFloat,System.Object)">
            <summary>Compare two objects to one another to see if they are equal</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two objects to one another to see if they are equal</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFloat.op_Inequality(DaanV2.NBT.NBTTagFloat,System.Object)">
            <summary>Compare two objects to one another to see if they are not equal</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare two objects to one another to see if they are not equal</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagIntArray">
            <summary>The class that stores the information for: IntArray</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagIntArray"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.#ctor(System.String,System.Int32[])">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagIntArray"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagIntArray._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagIntArray.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.Equals(DaanV2.NBT.NBTTagIntArray)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.op_Equality(DaanV2.NBT.NBTTagIntArray,DaanV2.NBT.NBTTagIntArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.op_Inequality(DaanV2.NBT.NBTTagIntArray,DaanV2.NBT.NBTTagIntArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.op_Equality(DaanV2.NBT.NBTTagIntArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagIntArray.op_Inequality(DaanV2.NBT.NBTTagIntArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagInt">
            <summary>The class that stores the information for: Int</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagInt"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagInt"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInt._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagInt.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.Equals(DaanV2.NBT.NBTTagInt)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.op_Equality(DaanV2.NBT.NBTTagInt,DaanV2.NBT.NBTTagInt)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.op_Inequality(DaanV2.NBT.NBTTagInt,DaanV2.NBT.NBTTagInt)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.op_Equality(DaanV2.NBT.NBTTagInt,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagInt.op_Inequality(DaanV2.NBT.NBTTagInt,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagList">
            <summary>The class that stores the information for: List</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.#ctor(DaanV2.NBT.NBTTagType)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.#ctor(DaanV2.NBT.NBTTagType,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
            <param name="Capacity">The capacity to set the collection to</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.#ctor(System.String,DaanV2.NBT.NBTTagType,System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
            <param name="Capacity">The capacity to set the collection to</param>
        </member>
        <member name="P:DaanV2.NBT.NBTTagList.Item(System.String)">
            <summary>Gets or sets the subtag with the given name</summary>
            <param name="Name">The name of the tag</param>
            <returns>Gets or sets the subtag with the given name</returns>
        </member>
        <member name="P:DaanV2.NBT.NBTTagList.Item(System.Int32)">
            <summary>Gets or sets the subtag with the given index</summary>
            <param name="Index">The index of </param>
            <returns>Gets or sets the subtag with the given index</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.Add(DaanV2.NBT.ITag)">
            <summary>Add the given tag to the internal list</summary>
            <param name="Tag">The tag to add</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.GetEnumerator">
            <summary>Returns an enumerator that iteraters through <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
            <returns>Returns an enumerator that iteraters through <see cref="T:DaanV2.NBT.NBTTagList"/></returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.System#Collections#Generic#IEnumerable{DaanV2#NBT#ITag}#GetEnumerator">
            <summary>Returns an enumerator that iteraters through <see cref="T:DaanV2.NBT.NBTTagList"/></summary>
            <returns>Returns an enumerator that iteraters through <see cref="T:DaanV2.NBT.NBTTagList"/></returns>
        </member>
        <member name="F:DaanV2.NBT.NBTTagList._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagList.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.GetValue">
            <summary>Returns the value of this instance</summary>
            <returns>Returns the value of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.GetValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.SetValue(System.Object)">
            <summary>Sets the value of this instance</summary>
            <param name="O">The value to set</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.ConvertValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.op_Equality(DaanV2.NBT.NBTTagList,DaanV2.NBT.NBTTagList)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.op_Inequality(DaanV2.NBT.NBTTagList,DaanV2.NBT.NBTTagList)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.op_Equality(DaanV2.NBT.NBTTagList,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.op_Inequality(DaanV2.NBT.NBTTagList,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.op_Implicit(DaanV2.NBT.NBTTagList)~System.Collections.Generic.List{DaanV2.NBT.ITag}">
            <summary>Converts the given <see cref="T:DaanV2.NBT.NBTTagList"/> to a list of tags</summary>
            <param name="A">The tag to cast</param>
            <returns>Converts the given <see cref="T:DaanV2.NBT.NBTTagList"/> to a list of tags</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.SetInformation(DaanV2.NBT.NBTTagInformation,System.Object)">
            <summary>Sets the specified information of this tag with the given value</summary>
            <param name="InfoType">The into type to store the information in</param>
            <param name="Info">The information to store</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.GetInformation(DaanV2.NBT.NBTTagInformation)">
            <summary>Retrieves the specified information</summary>
            <param name="InfoType">The info type to retrieve from this <see cref="T:DaanV2.NBT.ITag"/></param>
            <returns>Retrieves the specified information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.Equals(DaanV2.NBT.NBTTagList)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagList.Clone">
            <summary>Create a clone of this instance</summary>
            <returns>Create a clone of this instance</returns>
        </member>
        <member name="P:DaanV2.NBT.NBTTagList.SubType">
            <summary>Gets or sets the sub type of this tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagList._SubType">
            <summary>The field that stores the sub type</summary>
        </member>
        <member name="T:DaanV2.NBT.NBTTagLongArray">
            <summary>The class that stores the information for: LongArray</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagLongArray"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.#ctor(System.String,System.Int64[])">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagLongArray"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagLongArray._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagLongArray.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.Equals(DaanV2.NBT.NBTTagLongArray)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.op_Equality(DaanV2.NBT.NBTTagLongArray,DaanV2.NBT.NBTTagLongArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.op_Inequality(DaanV2.NBT.NBTTagLongArray,DaanV2.NBT.NBTTagLongArray)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.op_Equality(DaanV2.NBT.NBTTagLongArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLongArray.op_Inequality(DaanV2.NBT.NBTTagLongArray,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagLong">
            <summary>The class that stores the information for: Long</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagLong"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.#ctor(System.String,System.Int64)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagLong"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagLong._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagLong.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.Equals(System.Object)">
            <summary>Compares this instance to the given object</summary>
            <param name="obj">The object to compare to</param>
            <returns>Compares this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.Equals(DaanV2.NBT.NBTTagLong)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.op_Equality(DaanV2.NBT.NBTTagLong,DaanV2.NBT.NBTTagLong)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.op_Inequality(DaanV2.NBT.NBTTagLong,DaanV2.NBT.NBTTagLong)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.op_Equality(DaanV2.NBT.NBTTagLong,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagLong.op_Inequality(DaanV2.NBT.NBTTagLong,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagShort">
            <summary>The class that stores the information for: Short</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagShort"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.#ctor(System.String,System.Int16)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagShort"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagShort._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagShort.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.Equals(DaanV2.NBT.NBTTagShort)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.op_Equality(DaanV2.NBT.NBTTagShort,DaanV2.NBT.NBTTagShort)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.op_Inequality(DaanV2.NBT.NBTTagShort,DaanV2.NBT.NBTTagShort)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.op_Equality(DaanV2.NBT.NBTTagShort,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagShort.op_Inequality(DaanV2.NBT.NBTTagShort,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagString">
            <summary>The class that stores the information for: String</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagString"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.#ctor(System.String,System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagString"/></summary>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the tag</param>
        </member>
        <member name="F:DaanV2.NBT.NBTTagString._Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagString.Type">
            <summary>Returns the tag type of this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.Equals(System.Object)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.Equals(DaanV2.NBT.NBTTagString)">
            <summary>Compare this instance to the given object</summary>
            <param name="other">The object to compare to</param>
            <returns>Compare this instance to the given object</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.GetHashCode">
            <summary>Returns the hashcode of this instance</summary>
            <returns>Returns the hashcode of this instance</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.Clone">
            <summary>Clones this tag into a new one</summary>
            <returns>Clones this tag into a new one</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.op_Equality(DaanV2.NBT.NBTTagString,DaanV2.NBT.NBTTagString)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.op_Inequality(DaanV2.NBT.NBTTagString,DaanV2.NBT.NBTTagString)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.op_Equality(DaanV2.NBT.NBTTagString,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagString.op_Inequality(DaanV2.NBT.NBTTagString,System.Object)">
            <summary>Compare the two given tag with each other</summary>
            <param name="A">The first object to compare</param>
            <param name="B">The second object to compare</param>
            <returns>Compare the two given tag with each other</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTCompression">
            <summary>The type of compressions this NBT library uses</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTCompression.None">
            <summary>Marks that no compression should be used</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTCompression.Auto">
            <summary>Marks that the (de)serializers should detect which compression has been used</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTCompression.Gzip">
            <summary>Marks that the (de)serializers should use a GZIP stream</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTCompression.Zlib">
            <summary>Marks that the (de)serializers should use a Zlib stream</summary>
        </member>
        <member name="T:DaanV2.NBT.NBTTagInformation">
            <summary>The enumerator that helps with specifing which </summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInformation.Value">
            <summary>Marks that the process should target the value of the tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInformation.Name">
            <summary>Marks that the process should target the name of the tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInformation.Tag">
            <summary>Marks that the process should target the subtags of the tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInformation.ListSize">
            <summary>Marks that the process should target the size of the list of the tag</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagInformation.ListSubtype">
            <summary>Marks that the process should target the sub types of the list of the tag</summary>
        </member>
        <member name="T:DaanV2.NBT.NBTTagType">
            <summary>The enumerator that stores all the possible subtypes for nbt tags</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.End">
            <summary>Marks that the nbt tag is the last in a series of tags</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Byte">
            <summary>Marks that the nbt tag stores a <see cref="T:System.Byte"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Short">
            <summary>Marks that the nbt tag stores an <see cref="T:System.Int16"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Int">
            <summary>Marks that the nbt tag stores an <see cref="T:System.Int32"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Long">
            <summary>Marks that the nbt tag stores an <see cref="T:System.Int64"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Float">
            <summary>Marks that the nbt tag stores a <see cref="T:System.Single"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Double">
            <summary>Marks that the nbt tag stores a <see cref="T:System.Double"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.ByteArray">
            <summary>Marks that the nbt tag stores a <see cref="!:System.Byte[]"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.String">
            <summary>Marks that the nbt tag stores a <see cref="T:System.String"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.List">
            <summary>Marks that the nbt tag stores a List of unnamed tags</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Compound">
            <summary>Marks that the nbt tag stores a composite tag of named subtags</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.IntArray">
            <summary>Marks that the nbt tag stores a <see cref="!:Int32[]"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.LongArray">
            <summary>Marks that the nbt tag stores a <see cref="!:Int64[]"/> of information</summary>
        </member>
        <member name="F:DaanV2.NBT.NBTTagType.Unknown">
            <summary>No idea what the tag should be</summary>
        </member>
        <member name="T:DaanV2.NBT.ITagCollection">
            <summary>The interface responsible for forming the contract on how Tag collection should behave</summary>
        </member>
        <member name="P:DaanV2.NBT.ITagCollection.Count">
            <summary>Returns the amount of sub tags this instance has</summary>
        </member>
        <member name="P:DaanV2.NBT.ITagCollection.Item(System.String)">
            <summary>Returns the tag with the specified name</summary>
            <param name="Name">The name of the tag</param>
            <returns>Returns the tag with the specified name</returns>
        </member>
        <member name="P:DaanV2.NBT.ITagCollection.Item(System.Int32)">
            <summary>Returns the tag at the specified index</summary>
            <param name="Index">The index to look at</param>
            <returns>Returns the tag at the specified index</returns>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.Add(DaanV2.NBT.ITag)">
            <summary>Adds the given tag to this instance</summary>
            <param name="tag">The tag to add</param>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.Remove(System.Int32)">
            <summary>Removes the tag at the specified index</summary>
            <param name="Index">The index of the tag to remove</param>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.Remove(System.String)">
            <summary>Removes the tag with the specified name</summary>
            <param name="Name">The name of the tag to remove</param>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.Clear">
            <summary>Removes all the tag inside this instance</summary>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.GetSubTag(System.String)">
            <summary>Retrieves the subtag with the specified name, this is done safetly, if nothing is found then null is returned</summary>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.GetSubTag(System.Int32)">
            <summary>Retrieves the subtag at the specified index, this is done safetly, if nothing is found then null is returned</summary>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.GetSubValue``1(System.String)">
            <summary>Retrieves the value of specified subtag, this is done safetly, if nothing is found or can be converted then null is returned</summary>
        </member>
        <member name="M:DaanV2.NBT.ITagCollection.GetSubValue``1(System.Int32)">
            <summary>Retrieves the value of specified subtag, this is done safetly, if nothing is found or can be converted then null is returned</summary>
        </member>
        <member name="T:DaanV2.NBT.ITag">
            <summary>The class that is responsible for forming the contract on how Nbt Tag should behave</summary>
        </member>
        <member name="P:DaanV2.NBT.ITag.Name">
            <summary>Gets or sets the name of this tag</summary>
        </member>
        <member name="P:DaanV2.NBT.ITag.Type">
            <summary>Gets the type of this tag</summary>
        </member>
        <member name="M:DaanV2.NBT.ITag.GetValue">
            <summary>Gets the value of this tag</summary>
            <returns>Gets the value of this tag</returns>
        </member>
        <member name="M:DaanV2.NBT.ITag.GetValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.ITag.ConvertValue``1">
            <summary>Converts the value of this tag to the specified type</summary>
            <typeparam name="T">The type to convert to</typeparam>
            <returns>Converts the value of this tag to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.ITag.SetValue(System.Object)">
            <summary>Sets the value of this tag with the given value</summary>
            <param name="O">The value to set</param>
        </member>
        <member name="M:DaanV2.NBT.ITag.SetInformation(DaanV2.NBT.NBTTagInformation,System.Object)">
            <summary>Sets the specified information of this tag with the given value</summary>
            <param name="InfoType">The into type to store the information in</param>
            <param name="Info">The information to store</param>
        </member>
        <member name="M:DaanV2.NBT.ITag.GetInformation(DaanV2.NBT.NBTTagInformation)">
            <summary>Retrieves the specified information</summary>
            <param name="InfoType">The info type to retrieve from this <see cref="T:DaanV2.NBT.ITag"/></param>
            <returns>Retrieves the specified information</returns>
        </member>
        <member name="M:DaanV2.NBT.ITag.Clone">
            <summary>Creates a copy of this instance</summary>
            <returns>Creates a copy of this instance</returns>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundReader">
            <summary>The nbt tag compound reader</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundReader._ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundReader.ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundReader.ReadContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's content from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundReader.ReadHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's header from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagListReader">
            <summary>The class that read an nbt tag list from the stream</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagListReader._ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagListReader.ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagListReader.ReadContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's content from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to read from</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagListReader.ReadHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's header from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to read from</param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeReader">
            <summary>A class that can read base types from the stream</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeReader._ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeReader.ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeReader.ReadContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's content from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeReader.ReadHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's header from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeWriter">
            <summary>The type writer for all basic types</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeWriter._ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeWriter.ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeWriter.WriteHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's header to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagBaseTypeWriter.WriteContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's content to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundWriter">
            <summary>The class that write a given NBT Tag compound into stream</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundWriter._ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundWriter.WriteHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's header to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundWriter.WriteContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's content to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagCompoundWriter.ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="T:DaanV2.NBT.Serialization.Serialization.NBTTagListWriter">
            <summary>The class that write an nbt tag list into the stream</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.Serialization.NBTTagListWriter._ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagListWriter.WriteHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's header to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.Serialization.NBTTagListWriter.WriteContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's content to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="P:DaanV2.NBT.Serialization.Serialization.NBTTagListWriter.ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="T:DaanV2.NBT.Serialization.SerializationContext">
            <summary>The context needed per (de)serialization process, only use one SerializationContext per thread. As the resource are not thread safe</summary>
            <remarks>This object cannot be shared among different threads</remarks>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContext.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Serialization.SerializationContext"/></summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContext.#ctor(DaanV2.Binary.Endianness,System.IO.Stream)">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Serialization.SerializationContext"/></summary>
            <param name="endianness">The endianness of the NBt structure</param>
            <param name="stream">The stream for reading/writing</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContext.Finalize">
            <summary>Deconstructs the current <see cref="T:DaanV2.NBT.Serialization.SerializationContext"/></summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.SerializationContext.Endianness">
            <summary>
            
            </summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.SerializationContext.Buffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.SerializationContext.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContext.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContext.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.ITagReader">
            <summary>The interface responsible for determing on how to </summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.ITagReader.ReadHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's header from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.ITagReader.ReadContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the nbt's content from the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to read from the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="P:DaanV2.NBT.Serialization.ITagReader.ForType">
            <summary>Gets the type for which this object can read</summary>
        </member>
        <member name="T:DaanV2.NBT.Serialization.ITagWriter">
            <summary>The interface responsible for forming the contract on how Tag writer should behave</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.ITagWriter.WriteHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's header to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.ITagWriter.WriteContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the nbt's content to the <see cref="T:System.IO.Stream"/></summary>
            <param name="tag">The tag to write to the <see cref="T:System.IO.Stream"/></param>
            <param name="Context">The context that provides a buffer, the stream and endianness of the NBT</param>
        </member>
        <member name="P:DaanV2.NBT.Serialization.ITagWriter.ForType">
            <summary>Gets the type for which this object can write</summary>
        </member>
        <member name="T:DaanV2.NBT.Serialization.SerializationContextExtension">
            <summary>The class that extends upon the <see cref="T:DaanV2.NBT.Serialization.SerializationContext"/></summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.ByteSize">
            <summary>Returns the amount of bytes a <see cref="T:System.Byte"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.Int16Size">
            <summary>Returns the amount of bytes a <see cref="T:System.Int16"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.Int32Size">
            <summary>Returns the amount of bytes a <see cref="T:System.Int32"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.Int64Size">
            <summary>Returns the amount of bytes a <see cref="T:System.Int64"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.sByteSize">
            <summary>Returns the amount of bytes a <see cref="T:System.SByte"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.UInt16Size">
            <summary>Returns the amount of bytes a <see cref="T:System.UInt16"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.UInt32Size">
            <summary>Returns the amount of bytes a <see cref="T:System.UInt32"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.UInt64Size">
            <summary>Returns the amount of bytes a <see cref="T:System.UInt64"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.SingleSize">
            <summary>Returns the amount of bytes a <see cref="T:System.Single"/> uses</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.SerializationContextExtension.DoubleSize">
            <summary>Returns the amount of bytes a <see cref="T:System.Double"/> uses</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteBytes(DaanV2.NBT.Serialization.SerializationContext,System.Byte[])">
            <summary>Writes an array of <see cref="T:System.Byte"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Buffer">The buffer to write to stream</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteInt16(DaanV2.NBT.Serialization.SerializationContext,System.Int16)">
            <summary>Writes an <see cref="T:System.Int16"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteInt32(DaanV2.NBT.Serialization.SerializationContext,System.Int32)">
            <summary>Writes an <see cref="T:System.Int32"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteInt64(DaanV2.NBT.Serialization.SerializationContext,System.Int64)">
            <summary>Writes an <see cref="T:System.Int64"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteFloat(DaanV2.NBT.Serialization.SerializationContext,System.Single)">
            <summary>Writes an <see cref="T:System.Single"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteDouble(DaanV2.NBT.Serialization.SerializationContext,System.Double)">
            <summary>Writes an <see cref="T:System.Double"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteInt32Array(DaanV2.NBT.Serialization.SerializationContext,System.Int32[])">
            <summary>Writes an array of <see cref="T:System.Int32"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.WriteInt64Array(DaanV2.NBT.Serialization.SerializationContext,System.Int64[])">
            <summary>Writes an array of <see cref="T:System.Int64"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Context">The Context that holds the stream, buffer, and endianness</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadBytes(DaanV2.NBT.Serialization.SerializationContext,System.Int32)">
            <summary>Reads the amount of specified bytes from stream and stores them in an array</summary>
            <param name="Context">The context to use to read</param>
            <param name="Length">The amount of bytes to read from</param>
            <returns>Reads the amount of specified bytes from stream and stores them in an array</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadInt16(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.Int16"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.Int16"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadInt32(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.Int32"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.Int32"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadInt64(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.Int64"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.Int64"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadUInt16(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.UInt16"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.UInt16"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadUInt32(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.UInt32"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.UInt32"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadUInt64(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.UInt64"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.UInt64"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadFloat(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.Single"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.Single"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadDouble(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads an <see cref="T:System.Double"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <returns>Reads an <see cref="T:System.Double"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadInt32Array(DaanV2.NBT.Serialization.SerializationContext,System.Int32)">
            <summary>Reads an <see cref="!:Int32[]"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <param name="Length">The amount to read</param>
            <returns>Reads an <see cref="!:Int32[]"/> from the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.SerializationContextExtension.ReadInt64Array(DaanV2.NBT.Serialization.SerializationContext,System.Int32)">
            <summary>Reads an <see cref="!:Int64[]"/> from the given information</summary>
            <param name="Context">The context to use to read</param>
            <param name="Length">The amount to read</param>
            <returns>Reads an <see cref="!:Int64[]"/> from the given information</returns>
        </member>
        <member name="T:DaanV2.NBT.Serialization.NBTReader">
            <summary>The class that deserializers the given stream into Tags</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Serialization.NBTReader"/></summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.NBTReader._Readers">
            <summary>The dictionary of readers</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.GetReader(DaanV2.NBT.NBTTagType)">
            <summary>Tries to get a writer from the given type, if nothing found null is returned</summary>
            <param name="Type">The type to get a writer for</param>
            <returns>Tries to get a writer from the given type, if nothing found null is returned</returns>
        </member>
        <member name="P:DaanV2.NBT.Serialization.NBTReader.Readers">
            <summary>The dictionary of readers</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadFile(System.String,DaanV2.Binary.Endianness,DaanV2.NBT.NBTCompression)">
            <summary>Reads the content of the given file</summary>
            <param name="Filepath">The file to read from</param>
            <param name="endianness">The endianness of the nbt structure</param>
            <param name="Compression">The compression type used</param>
            <returns>Reads the content of the given file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadFile(System.IO.Stream,DaanV2.Binary.Endianness)">
            <summary>Reads the content of the given file</summary>
            <param name="stream">The stream to read from</param>
            <param name="endianness">The endianness of the nbt structure</param>
            <returns>Reads the content of the given file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadFile(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the content of the given file</summary>
            <param name="Context">The context to read from</param>
            <returns>Reads the content of the given file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadString(System.IO.Stream,DaanV2.Binary.Endianness)">
            <summary>Read a string from the given stream</summary>
            <param name="Reader">The stream to read from</param>
            <param name="endianness">The endianness of the NBT structure</param>
            <returns>Read a string from the given stream</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadString(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Read a string from the given context</summary>
            <param name="Context">The context to read from</param>
            <returns>Read a string from the given context</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.Read(System.IO.Stream,DaanV2.Binary.Endianness)">
            <summary>Reads the NBTTag from the given stream</summary>
            <param name="stream">The stream to read from</param>
            <param name="endianness">the endianness of the NBT structure</param>
            <returns>Reads the NBTTag from the given stream</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.Read(DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Reads the NBTTag from the given stream</summary>
            <param name="Context">The context to read from</param>
            <returns>Reads the NBTTag from the given stream</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadHeader(DaanV2.NBT.NBTTagType,DaanV2.NBT.Serialization.SerializationContext,DaanV2.NBT.ITag)">
            <summary>Reads the header of the given tag</summary>
            <param name="Type">The type to read</param>
            <param name="Context">The context needed to read from</param>
            <param name="Receiver">The receing tag</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTReader.ReadContent(DaanV2.NBT.NBTTagType,DaanV2.NBT.Serialization.SerializationContext,DaanV2.NBT.ITag)">
            <summary>Reads the content of the given tag</summary>
            <param name="Type">The type to read</param>
            <param name="Context">The context needed to read from</param>
            <param name="Receiver">The receing tag</param>
        </member>
        <member name="T:DaanV2.NBT.Serialization.NBTWriter">
            <summary>The static class that serializes the given tags</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.Serialization.NBTWriter"/></summary>
        </member>
        <member name="P:DaanV2.NBT.Serialization.NBTWriter.Writers">
            <summary>Gets or sets the dictionary of writers</summary>
        </member>
        <member name="F:DaanV2.NBT.Serialization.NBTWriter._Writers">
            <summary>The dictionary of writers</summary>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.GetWriter(DaanV2.NBT.NBTTagType)">
            <summary>Tries to get a writer from the given type, if nothing found null is returned</summary>
            <param name="Type">The type to get a writer for</param>
            <returns>Tries to get a writer from the given type, if nothing found null is returned</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.Write(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the given tag into a stream</summary>
            <param name="tag">The tag to write</param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteHeader(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the given tag's header into a stream</summary>
            <param name="tag">The tag to write</param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteContent(DaanV2.NBT.ITag,DaanV2.NBT.Serialization.SerializationContext)">
            <summary>Writes the given tag's content into a stream</summary>
            <param name="tag">The tag to write</param>
            <param name="Context">The context to write to</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteFile(System.String,DaanV2.NBT.ITag,DaanV2.NBT.NBTCompression,DaanV2.Binary.Endianness)">
            <summary>Writes the given nbtstructure into a file</summary>
            <param name="Filepath">The filepath to write to</param>
            <param name="Tag">The tag to write</param>
            <param name="compression">The compression type to be used</param>
            <param name="endianness">The endianness of the nbt structure</param>
            <returns>Writes the given nbtstructure into a file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteFile(System.IO.Stream,DaanV2.NBT.ITag,DaanV2.NBT.NBTCompression,DaanV2.Binary.Endianness)">
            <summary>Writes the given nbtstructure into a file</summary>
            <param name="stream">The stream to write to</param>
            <param name="Tag">The tag to write</param>
            <param name="compression">The compression type to be used</param>
            <param name="endianness">The endianness of the nbt structure</param>
            <returns>Writes the given nbtstructure into a file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteFile(System.String,DaanV2.NBT.ITag,DaanV2.Binary.Endianness)">
            <summary>Writes the given nbtstructure into a file</summary>
            <param name="Filepath">The filepath to write to</param>
            <param name="Tag">The tag to write</param>
            <param name="endianness">The endianness of the nbt structure</param>
            <returns>Writes the given nbtstructure into a file</returns>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteString(System.IO.Stream,System.String,DaanV2.Binary.Endianness)">
            <summary>Writes a string into the stream</summary>
            <param name="Writer">The stream to write to</param>
            <param name="Text">The text to write</param>
            <param name="endianness">The endianness of the nbt structure</param>
        </member>
        <member name="M:DaanV2.NBT.Serialization.NBTWriter.WriteString(DaanV2.NBT.Serialization.SerializationContext,System.String)">
            <summary>Writes a string into the stream</summary>
            <param name="Context">The context to write to</param>
        </member>
        <member name="T:DaanV2.NBT.ArrayExtension">
            <summary>The static class that extends upon existing array/collections</summary>
        </member>
        <member name="M:DaanV2.NBT.ArrayExtension.Clone(System.Collections.Generic.List{DaanV2.NBT.ITag})">
            <summary>Extends the clone mechanics of all the tags to collections</summary>
            <param name="Values">The values of sub tags to convert</param>
            <returns>Extends the clone mechanics of all the tags to collections</returns>
        </member>
        <member name="M:DaanV2.NBT.ArrayExtension.Clone(DaanV2.NBT.ITagCollection)">
            <summary>Extends the clone mechanics of all the tags to collections</summary>
            <param name="Values">The values of sub tags to convert</param>
            <returns>Extends the clone mechanics of all the tags to collections</returns>
        </member>
        <member name="M:DaanV2.NBT.CompressionStream.GetCompressionStream(System.IO.Stream,DaanV2.NBT.NBTCompression)">
            <summary>Checks the given compression tag and creates a compression stream around the given stream</summary>
            <param name="stream">The stream to wrap around</param>
            <param name="Compression">The compression type to use</param>
            <returns>Checks the given compression tag and creates a compression stream around the given stream</returns>
        </member>
        <member name="M:DaanV2.NBT.CompressionStream.GetCompressionStream(System.String,DaanV2.NBT.NBTCompression)">
            <summary>Creates a new stream that supports possible compression</summary>
            <param name="Filepath">The file to create a stream from</param>
            <param name="Compression">The compression type to use</param>
            <returns>Creates a new stream that supports possible compression</returns>
        </member>
        <member name="M:DaanV2.NBT.CompressionStream.GetDecompressionStream(System.IO.Stream,DaanV2.NBT.NBTCompression)">
            <summary>Gets a decompression stream from the specified information</summary>
            <param name="stream">The stream to wrap around</param>
            <param name="Compression">The compression type to use</param>
            <returns>Gets a decompression stream from the specified information</returns>
        </member>
        <member name="M:DaanV2.NBT.CompressionStream.GetDecompressionStream(System.String,DaanV2.NBT.NBTCompression)">
            <summary>Gets a decompression stream from the specified information</summary>
            <param name="Filepath">File to create a stream from</param>
            <param name="Compression">The compression type to use</param>
            <returns>Gets a decompression stream from the specified information</returns>
        </member>
        <member name="M:DaanV2.NBT.CompressionStream.DetectCompression(System.IO.Stream)">
            <summary>Detect which compression has been used</summary>
            <param name="stream">The stream to read from</param>
            <returns>Detect which compression has been used</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTCasting">
            <summary>The class that provide support converting between values</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Int32,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Single,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Double,System.Type)">
             <summary>Converts the given value into the specified type</summary>
             <param name="Value">The value to convert</param>
             <param name="To">The type to convert to</param>
            <returns>Converts the given value into the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.ConvertList``1(DaanV2.NBT.ITag)">
            <summary>Converts the given tag into a list</summary>
            <typeparam name="T">The type to convert the items to</typeparam>
            <param name="Tag">The tag to convert to a list</param>
            <returns>Converts the given tag into a list</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Int16,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Int64,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Int32[],System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.String,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Int64[],System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Byte[],System.Type)">
             <summary>Converts the given value into the specified type</summary>
             <param name="Value">The value to convert</param>
             <param name="To">The type to convert to</param>
            <returns>Converts the given value into the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTCasting"/></summary>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.Convert(System.Byte,System.Type)">
            <summary>Converts the given byte to the specified type</summary>
            <param name="Value">The value to convert</param>
            <param name="To">The type to convert to</param>
            <returns>Converts the given byte to the specified type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTCasting.ConvertTo``1(System.Object)">
            <summary>Converts the given object into the specified type</summary>
            <typeparam name="T">The type to conver to</typeparam>
            <param name="Value">The object to convert</param>
            <returns>Converts the given object into the specified type</returns>
        </member>
        <member name="T:DaanV2.NBT.NBTTagFactory">
            <summary>The class that stores the information for: Factory</summary>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.CreateList(System.String,DaanV2.NBT.NBTTagType)">
            <summary>Creates the specified list as a tag</summary>
            <param name="Name">The name of the list</param>
            <param name="SubType">The subtype to fill</param>
            <returns>Creates the specified list as a tag</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Transfer``1(DaanV2.NBT.ITag,System.Type,System.Collections.Generic.List{``0})">
            <summary>Transfers a list of items into a tag as sub tag intems</summary>
            <typeparam name="T">The type of items to transfer</typeparam>
            <param name="List">The tag to receive the new sub tags</param>
            <param name="SubType">The sub tag type, must implement <see cref="T:DaanV2.NBT.ITag"/></param>
            <param name="Source">The source of items to transfer</param>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Boolean})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Byte})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Double})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Single})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.Int16})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Collections.Generic.List{System.String})">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(DaanV2.NBT.NBTTagType)">
            <summary>Creates a tag with the specified tag type</summary>
            <param name="type">The tag type</param>
            <returns>Creates a tag with the specified tag type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(DaanV2.NBT.NBTTagType,System.String,System.Object)">
            <summary>Creates a tag with the specified information</summary>
            <param name="type">The tag type</param>
            <param name="Name">The name of the tag</param>
            <param name="Value">The value of the type</param>
            <returns>Creates a tag with the specified tag type</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Boolean)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Byte)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Double)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Single)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Int32)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Int32[])">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Int64)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Int64[])">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.Int16)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.Create(System.String,System.String)">
            <summary>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</summary>
            <param name="Name">The name of the Tag</param>
            <param name="Value">The value of the receiving tag</param>
            <returns>Creates an <see cref="T:DaanV2.NBT.ITag"/> that suits the given information</returns>
        </member>
        <member name="M:DaanV2.NBT.NBTTagFactory.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.NBT.NBTTagFactory"/></summary>
        </member>
        <member name="P:DaanV2.NBT.NBTTagFactory.Types">
            <summary>The collection of Tag types to actuall types</summary>
        </member>
        <member name="M:DaanV2.NBT.StreamExtension.WriteInt16(System.IO.Stream,System.Int16,DaanV2.Binary.Endianness)">
            <summary>Writes an <see cref="T:System.Int16"/> into the <see cref="T:System.IO.Stream"/></summary>
            <param name="Stream">The stream to write to</param>
            <param name="Value">The value to convert and write to <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:DaanV2.NBT.StreamExtension.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>Reads the amount of specified bytes from the stream</summary>
            <param name="stream">The stream to read from</param>
            <param name="Amount">The amount of bytes to read</param>
            <returns>Reads the amount of specified bytes from the stream</returns>
        </member>
        <member name="M:DaanV2.NBT.StreamExtension.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>Writes the given byte array into the stream</summary>
            <param name="stream">The stream to write into</param>
            <param name="Data">The data to write</param>
        </member>
        <member name="M:DaanV2.NBT.StreamExtension.ReadByte(System.IO.Compression.GZipStream)">
            <summary>Reads a byte from the given Gzip stream</summary>
            <param name="stream">The stream to read from</param>
            <returns>Reads a byte from the given Gzip stream</returns>
        </member>
        <member name="T:DaanV2.NBT.Utillity">
            <summary>The static class that provides utillity to the rest of the api</summary>
        </member>
        <member name="M:DaanV2.NBT.Utillity.GetInterfaces``1">
            <summary>Returns a list of object that all implement a specified type</summary>
            <returns>Returns a list of object that all implement a specified type</returns>
        </member>
    </members>
</doc>
